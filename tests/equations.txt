
/*
tests: equation du rayon:
z = sin(aH) * x => mais ça réduit si on augmente aV donc NON

y augmente? quand distance_origine augmente et que aV > 0
y = sin(aV) * distance_origine = sin(aV) * sqrt(x²+z²)
t temp en s
y = sin(aV)*t
x = cos(aH)*t*cos(aV)
z = sin(aH)*t*cos(aV)
<=> t = y/sin(aV) = x/cos(aH)cos(aV) = z/sin(aH)cos(aV)
<=> z/sin(aH) = x/cos(aH)
<=> z*cos(aH) = x*sin(aH)
<=> z = x*sin(aH)/cos(aH)
mais si aH = 90... ça marche plus
=> en 2D ça fait la même: y=a ou x=a (on peut pas mettre de x ou de y dans ces cas

un point en 1D? ax+b = 0
une droite en 2D? ax+by+c = 0
une plan en 3D? ax+by+cz+d = 0
il faut trouver l'équation du plan ou du volume du cube (?)
la droite il faut le point d'origine (client) et calculer un autre point => pour avoir le vecteur


equation d'un plan:
https://www.maxicours.com/se/cours/equation-cartesienne-d-un-plan/
https://www.youtube.com/watch?v=s4xqI6IPQBY
intersection d'un plan et d'une droite:
https://youtu.be/BYBMauyizhE

Pour commencer: #Orthogonal
verifier que AB et le plan P sont sécants:
=> si vecteur normal de P est orthogonal à AB alors on s'arrete
m(a, b, c) est un vecteur normal de P avec l'équation de P: ax+by+cz+d = 0
xm*xAB + ym*yAB + zm*zAB = 0 ? alors on s'arrete

#Intersection
Droite:
x = xA + xAB*t
y = yA + yAB*t
z = zA + zAB*t
Plan:
ax+by+cz+d = 0
<=> a*(xAB*t + xA) + b*(yAB*t + yA) + c*(zAB*t + zA) + d = 0
<=> (a*xAB + b*yAB + c*zAB)*t = -a*xA -b*yA -c*zA - d
<=> t = -(a*xA + b*yA + c*zA + d)/(a*xAB + b*yAB + c*zAB)


plus qu'a trouver a, b et c...
On connait 4 points du plan, on s'en sert que de 2
il faut donc trouver un vecteur normal n => perpendiculaire à 2 droites du plan => on prend AB et AC

n perpendiculaire AB et AC (et AB pas colinéaire à AC => pas le meme angle)
<=> n.AB = a*xAB + b*yAB + c*zAB = 0
<=> n.AC = a*xAC + b*yAC + c*zAC = 0


#EquationPlan
on a:	n.AB = xAB*a+yAB*b+zAB*c = 0
        n.AC = xAC*a+yAC*b+zAC*c = 0
1) on veut yAB*b - n*yAC*b = 0 (n Réel)
<=> nb = yAB/yAC
on a:
n.AB - n*n.AC = xAB*a + zAB*c - n(xAC*a + zAC*c) = 0
<=> c(zAB-zAC*n) = -(xAB-xAC*n)*a = (xAC*n-xAB)*a
<=> c = (xAC*n-xAB)*a/(zAB-zAC*n)

2)pareil avec zAB*c - n*zAC*c = 0 (n Réel)
<=> nc = zAB/zAC
<=> b = (xAC*n-xAB)*a/(yAB-yAC*n)

test avec -3a+b+2c = 0 et -7a-2b+4c = 0 (maxicours)
nb = yAB/yAC = 1/-2 = -1/2
c = (-7*-1/2 - -3)*a/(2 - 4*-1/2)
  = (7/2 + 3)*a/(2 + 2)
  = (13)/2*a/4
  = 13*a/8 OK
nc = zAB/zAC = 2/4 = 1/2
b = (-7*1/2 - -3)*a/(1 - -2*1/2)
  = (-7+6)/2 *a/(1+1)
  = -1*a/4 = -a/4 OK

après on détermine a comme on veut (1 par exemple)

on cherche d
on sait que A appartient au plan donc l'équation = 0
=> a*xA + b*yA + c*zA = -d

*/




# Calculs pour HRect3D::containsLine
TODO: est ce que le point peut atteindre le block ? => sphère ? semble le plus opti
on veut la distance la plus courte entre la droite et le centre => sphère
pC = pB + t(a, b, c)
on cherche t lorsque pC est au plus proche de getPoint()

const doubli distance = sqrt( sqr(offset.x() + t*a) + sqr(offset.y() + t*b) + sqr(offset.y() + t*c) );
= sqrt( offset.x()² + offset.y()² + offset.z()² + t*(offset.x()*a + offset.y()*b + offset.z()*c) + t²*(a²+b²+c²) );
dD/dt = 1/(2*sqrt(...)) * ( (offset.x()*a + offset.y()*b + offset.z()*c) + 2t*(a²+b²+c²) )  == 0 ?
=> (offset.x()*a + offset.y()*b + offset.z()*c) + 2t*(a²+b²+c²) == 0
=> t = -(offset.x()*a + offset.y()*b + offset.z()*c) / (2*(a²+b²+c²))

Sans calculs : 2.4s

Calculs V1 : 1.7s
```
const doubli a = pB.x() - pA.x(), b = pB.y() - pA.y(), c = pB.z() - pA.z();

const Point3D offset = pA - getMiddle();
// point le plus proche du centre
const doubli t = - (offset.x() * a + offset.y() * b + offset.z() * c) / (a*a+ b*b+c*c);

// distance de sphère => réduit très efficacement les possibilitées
const doubli distance = sqrt( sqr(offset.x() + t*a) + sqr(offset.y() + t*b) + sqr(offset.z() + t*c) );
if(distance > 1) return false;
return true;

// distance de losange => réduit encore les possibilitées
const doubli distance2 = abs(offset.x() + t*a) + abs(offset.y() + t*b) + abs(offset.z() + t*c);
return distance2 < 1.732051; // ~sqrt(3) distance en diagonal
```

calculs V2 : 1.2s !!!!!
à noter : le plus proche n'est pas forcément dans le cadre => on peut pas utiliser contains()
sinon il faudrait obtenir t tel que contains soit valide ?
=> oui ça serait plus opti..., là le mieux qu'on puisse faire c'est la sphère et le losange
On veut un t tel que le point soit dans le HRect
pA.x() + t*a \in [pMin.x(); pMax.x()]
pA.y() + t*b \in [pMin.y(); pMax.y()]
pA.z() + t*c \in [pMin.z(); pMax.z()]
t \in [(pMin.x() - pA.x()) / a; (pMax.x() - pA.x()) / a]
t \in [(pMin.y() - pA.y()) / b; (pMax.y() - pA.y()) / b]
t \in [(pMin.z() - pA.z()) / c; (pMax.z() - pA.z()) / c]

```
const doubli a = pB.x() - pA.x(), b = pB.y() - pA.y(), c = pB.z() - pA.z();

const doubli t1X = (pMin.x() - pA.x()) / a,
        t2X = (pMax.x() - pA.x()) / a,
        t1Y = (pMin.y() - pA.y()) / b,
        t2Y = (pMax.y() - pA.y()) / b,
        t1Z = (pMin.z() - pA.z()) / c,
        t2Z = (pMax.z() - pA.z()) / c;
const doubli tMaxX = maths3D::max(t1X, t2X), tMinX = maths3D::min(t1X, t2X);
const doubli tMaxY = maths3D::max(t1Y, t2Y), tMinY = maths3D::min(t1Y, t2Y);
const doubli tMaxZ = maths3D::max(t1Z, t2Z), tMinZ = maths3D::min(t1Z, t2Z);

doubli tMin = maths3D::max(tMinX, tMinY, tMinZ);
doubli tMax = maths3D::min(tMaxX, tMaxY, tMaxZ);
if(tMax < tMin) return false;
return true;//t \in [tMin;tMax] // TODO: calculer avec les t ! ça sera plus simple ?
// pour les HRect en tout cas...
```




# signOf
équivalent à x/|x|
Si x = 0 on prend 1 ou -1, peu importe (1 de préférence)
```
const doubli v = 1, v2 = -1;
constexpr inline doubli signOf2(doubli x) { return (x >= 0) - (x < 0); }            // 12 ns / call
constexpr inline doubli signOf1(doubli d) { return d < 0 ? -1 : 1; }                // 9.5 ns / call
constexpr inline doubli signOf2_bis(const doubli &x) { return (x >= 0) - (x < 0); } // 6.8 ns / call
constexpr inline doubli signOf1_bis(const doubli &d) { return d < 0 ? -1 : 1; }     // 5.1 ns / call
constexpr inline const doubli &signOf4(const doubli &d) { return d < 0 ? v2 : v; }  // 3.8 ns / call
```



